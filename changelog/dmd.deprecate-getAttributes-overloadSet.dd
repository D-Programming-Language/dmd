Deprecate the ability to call `__traits(getAttributes)` on overload sets

Up until this release, `__traits(getAttributes)` could be called both on
individual functions and on overload sets. However, in the latter case,
the compiler simply collected the user defined attributes for the first
lexically defined function. This behavior is error prone. Consider:

```d
module test;

@("gigi")
void fun() {}
@("mimi")
void fun(int) {}

void main()
{
    static foreach(attr; __traits(getAttributes, fun))
        pragma(msg, attr);
```

The above code will print "gigi" although there is no indication on
what overload is actually queried. The first one is always picked.

Starting with this release, this sort of usage of `__traits(getAttributes)`
is deprecated. If a specific overload needs to be handled, `__traits(getOverloads)`
may be used in conjunction with `__traits(getAttributes)` for proper behavior:

```d
module test;

@("gigi")
void fun() {}
@("mimi")
void fun(int) {}

void main()
{
    static foreach (t; __traits(getOverloads, test, "fun"))
        static foreach(attr; __traits(getAttributes, t))
            pragma(msg, attr);
```

The above code prints:

```
gigi
mimi
```
