Using an invalid MemoryOrder for `core.atomic` operations are now rejected at compile time

The following `core.atomic` functions have become more restrictive:

1. `atomicLoad` and `atomicStore` now reject being instantiated with the
argument `MemoryOrder.acq_rel`. Previously `atomicLoad` and `atomicStore` only
rejected `MemoryOrder.rel` and `MemoryOrder.acq` respectively.

In most cases, code that previously used `MemoryOrder.acq_rel` should switch to
use `MemoryOrder.seq` instead.

---
// Error:
atomicLoad!(MemoryOrder.acq_rel)(src);
atomicStore!(MemoryOrder.acq_rel)(dest, value);

// Corrective action:
atomicLoad!(MemoryOrder.seq)(src);
atomicStore!(MemoryOrder.seq)(dest, value);

// Or:
atomicLoad(src);
atomicStore(dest, value);
---

2. `atomicExchange` now rejects being instantiated with the argument
`MemoryOrder.acq`.

In most cases, code that previously used `MemoryOrder.acq` should switch to use
`MemoryOrder.seq` instead.

---
// Error:
atomicExchange!(MemoryOrder.acq)(dest, value);

// Corrective action:
atomicExchange!(MemoryOrder.seq)(dest, value);

// Or:
atomicExchange(dest, value);
---

3. `atomicCompareExchangeWeak` and `atomicCompareExchangeStrong` now reject
being instantiated when the second `fail` argument is `MemoryOrder.rel` or
`MemoryOrder.acq_rel`.

In most cases, code that previously used either of these should switch to use
`MemoryOrder.raw` instead.

---
// Error:
atomicExchangeWeak!(MemoryOrder.rel, MemoryOrder.rel)(dest, compare, value);
atomicExchangeWeakNoResult!(MemoryOrder.acq_rel, MemoryOrder.acq_rel)(dest, compare, value);
atomicExchangeStrong!(MemoryOrder.acq, MemoryOrder.rel)(dest, compare, value);
atomicExchangeStrongNoResult!(MemoryOrder.seq, MemoryOrder.acq_rel)(dest, compare, value);

// Corrective action:
atomicExchangeWeak!(MemoryOrder.rel, MemoryOrder.raw)(dest, compare, value);
atomicExchangeWeakNoResult!(MemoryOrder.acq_rel, MemoryOrder.raw)(dest, compare, value);
atomicExchangeStrong!(MemoryOrder.acq, MemoryOrder.raw)(dest, compare, value);
atomicExchangeStrongNoResult!(MemoryOrder.seq, MemoryOrder.raw)(dest, compare, value);
---

4. `atomicCompareExchangeWeak` and `atomicCompareExchangeStrong` additionally
now reject being instantiated when the second `fail` argument has a greater
value than its first `succ` argument.

In most cases, code that violates this contract should use the same MemoryOrder
for both `succ` and `fail` arguments.

---
// Error:
atomicExchangeWeak!(MemoryOrder.raw)(dest, compare, value);
atomicExchangeStrong!(MemoryOrder.acq, MemoryOrder.seq)(dest, compare, value);

// Corrective action:
atomicExchangeWeak!(MemoryOrder.raw, MemoryOrder.raw)(dest, compare, value);
atomicExchangeStrong!(MemoryOrder.acq, MemoryOrder.acq)(dest, compare, value);
---
