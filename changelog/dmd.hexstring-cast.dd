Hex strings now convert to integer arrays

Hex strings are the most efficient way to embed binary data into source files.
However, they couldn't easily be used to initialize a `short[]`, `int[]` or `long[]` because re-interpret casting arrays is not allowed during CTFE.
Now, hex strings implicitly convert to all integer arrays.
A big endian byte order is assumed, consistent with how integer literals are written.

---
immutable uint[] data = x"AABBCCDD";

static assert(data[0] == 0xAABBCCDD);
---

Character postfixes can now also be used to explicitly set an element size of 2 or 4.

---
immutable ushort[] f = x"80 3F"w;
static assert(f[0] == 0x803F);

immutable ubyte[] g = x"80 35"w; // error: size mismatch
---

Formerly, they would pad each byte with 1 or 3 zeros, which did not serve a purpose (See [Issue 24363](https://issues.dlang.org/show_bug.cgi?id=24363)).

If the string's byte length is not a multiple of the target element size, it is an error:

---
immutable ushort[] e = x"AABBCC"w; // Error, 3 bytes is not a multiple of `ushort.sizeof`
---
