Integration with the Valgrind `memcheck` tool has been added to the garbage collector

The garbage collector gained a compile-time option to enable integration with Valgrind's `memcheck` tool.
When it is enabled, the GC will communicate with Valgrind and inform it which memory access operations are valid and which are not.

The integration allows catching memory errors in D programs which mix safe (GC) and unsafe (manual) memory management, for example:

---
import core.memory;

void main()
{
    auto arr = new int[3];
    GC.free(arr.ptr);
    arr[1] = 42; // use after free
}
---

To use it, obtain the DMD source code, then include the garbage collector and lifetime implementation into your program's compilation and compile with the `-debug=VALGRIND` option:

```
git clone -b v2.105.0 --depth=1 https://github.com/dlang/dmd
dmd -g -debug=VALGRIND program.d -Idmd/druntime/src dmd/druntime/src/{core/internal/gc/impl/conservative/gc,rt/lifetime,etc/valgrind/valgrind}.d
valgrind --tool=memcheck ./program
```

The option is compatible with other GC debugging build options, such as `MEMSTOMP` and `SENTINEL`.

Dub users can try the following equivalent recipe:

```
git clone -b v2.105.0 --depth=1 https://github.com/dlang/dmd
cat >> dub.sdl <<EOF
debugVersions "VALGRIND"
sourceFiles "dmd/druntime/src/core/internal/gc/impl/conservative/gc.d"
sourceFiles "dmd/druntime/src/rt/lifetime.d"
sourceFiles "dmd/druntime/src/etc/valgrind/valgrind.d"
importPaths "dmd/druntime/src"
EOF
dub build
valgrind --tool=memcheck ./program
```
