D1 operator overloads have been deprecated.

The following D1 operator overloads have been deprecated in favor of `opUnary`:
  * `opNeg`  Replace with `opUnary(string op)() if (op == "-")`
  * `opCom`  Replace with `opUnary(string op)() if (op == "~")`
  * `opPostInc` Replace with `opUnary(string op)() if (op == "++")`
  * `opPostDec` Replace with `opUnary(string op)() if (op == "--")`
  * `opStar` Replace with `opUnary(string op)() if (op == "*")`

The following D1 operator overloads have been deprecated in favor of `opBinary`:
  * `opAdd`  Replace with `opBinary(string op)(...) if (op == "+")`
  * `opSub`  Replace with `opBinary(string op)(...) if (op == "-")`
  * `opMul`  Replace with `opBinary(string op)(...) if (op == "*")`
  * `opDiv`  Replace with `opBinary(string op)(...) if (op == "/")`
  * `opMod`  Replace with `opBinary(string op)(...) if (op == "%")`
  * `opAnd`  Replace with `opBinary(string op)(...) if (op == "&")`
  * `opXor`  Replace with `opBinary(string op)(...) if (op == "^")`
  * `opOr`  Replace with `opBinary(string op)(...) if (op == "|")`
  * `opShl`  Replace with `opBinary(string op)(...) if (op == "<<")`
  * `opShr`  Replace with `opBinary(string op)(...) if (op == ">>")`
  * `opUShr`  Replace with `opBinary(string op)(...) if (op == ">>>")`
  * `opCat`  Replace with `opBinary(string op)(...) if (op == "~")`
  * `opIn`  Replace with `opBinary(string op)(...) if (op == "in")`

The following D1 operator overloads have been deprecated in favor of `opBinaryRight`:
  * `opAdd_r`  Replace with `opBinaryRight(string op)(...) if (op == "+")`
  * `opSub_r`  Replace with `opBinaryRight(string op)(...) if (op == "-")`
  * `opMul_r`  Replace with `opBinaryRight(string op)(...) if (op == "*")`
  * `opDiv_r`  Replace with `opBinaryRight(string op)(...) if (op == "/")`
  * `opMod_r`  Replace with `opBinaryRight(string op)(...) if (op == "%")`
  * `opAnd_r`  Replace with `opBinaryRight(string op)(...) if (op == "&")`
  * `opXor_r`  Replace with `opBinaryRight(string op)(...) if (op == "^")`
  * `opOr_r`  Replace with `opBinaryRight(string op)(...) if (op == "|")`
  * `opShl_r`  Replace with `opBinaryRight(string op)(...) if (op == "<<")`
  * `opShr_r`  Replace with `opBinaryRight(string op)(...) if (op == ">>")`
  * `opUShr_r`  Replace with `opBinaryRight(string op)(...) if (op == ">>>")`
  * `opCat_r`  Replace with `opBinaryRight(string op)(...) if (op == "~")`
  * `opIn_r`  Replace with `opBinaryRight(string op)(...) if (op == "in")`

The following D1 operator overloads have been deprecated in favor of `opOpAssign`:
  * `opAddAssign`  Replace with `opOpAssign(string op)(...) if (op == "+")`
  * `opSubAssign`  Replace with `opOpAssign(string op)(...) if (op == "-")`
  * `opMulAssign`  Replace with `opOpAssign(string op)(...) if (op == "*")`
  * `opDivAssign`  Replace with `opOpAssign(string op)(...) if (op == "/")`
  * `opModAssign`  Replace with `opOpAssign(string op)(...) if (op == "%")`
  * `opAndAssign`  Replace with `opOpAssign(string op)(...) if (op == "&")`
  * `opOrAssign`  Replace with `opOpAssign(string op)(...) if (op == "|")`
  * `opXorAssign`  Replace with `opOpAssign(string op)(...) if (op == "^")`
  * `opShlAssign`  Replace with `opOpAssign(string op)(...) if (op == "<<")`
  * `opShrAssign`  Replace with `opOpAssign(string op)(...) if (op == ">>")`
  * `opUShrAssign`  Replace with `opOpAssign(string op)(...) if (op == ">>>")`
  * `opCatAssign`  Replace with `opOpAssign(string op)(...) if (op == "~")`

Starting with this release, any D code that triggers a lowering to the D1 operator overloads will emit a deprecation warning.

Example of deprecation warning:
---
struct S
{
    int opAdd(int i) { ... }
}

void main()
{
    S s;
    int i;
    i = s + 1;  // Deprecation: `opAdd` is deprecated.  Use `opBinary` instead.
}
---

Example of corrective action:
---
struct S
{
    int opBinary(string op)(int i) if (op == "+") { ... }
}

void main()
{
    S s;
    int i;
    i = s + 1;  // OK
}
---
