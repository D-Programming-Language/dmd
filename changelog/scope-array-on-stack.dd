Array literals assigned to `scope` array variables can now be allocated on the stack

Formerly, they were always allocated with the Garbage Collector, making it unavailable in `@nogc` or `-betterC` code.
This led to frequent use of the following workaround:

---
void main() @nogc
{
    int[3] buffer = [10, 20, 30];
    int[] arr = buffer[];
}
---

This can now be written in a single line:

---
void main() @nogc
{
    scope int[] arr = [10, 20, 30];
}
---

With the following limitations:
- The variable must be explicitly annotated `scope`, not just inferred `scope`
- The `-preview=dip1000` must be passed, to prevent introducing memory corruption in legacy code.
Note that in `@system` and `@trusted` code, the compiler doesn't verify that your `scope` variable doesn't escape.
- The array literal must be initializing the variable. Subsequent array literals assignments still use the GC.
- The array elements may not have a destructor

Some of these limitations might get lifted in the future.
