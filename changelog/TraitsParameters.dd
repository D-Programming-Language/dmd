Add `__traits(parameters)`

If used inside a function, this trait yields a
tuple of the parameters to that function for example:

---
int echoPlusOne(int x)
{
    __traits(parameters)[0] += 1;
    return x;
}
---

This can be used to simply forward a functions parameters (becoming arguments of another),
in effect unifying functions with variadic parameters and normal functions
i.e. the following pattern is now possible without use of variadics:

---
int add(int x, int y)
{
    return x + y;
}

auto forwardToAdd(Pack...)(Pack xy)
{
    return add(xy);
}
---
would become
---
int add(int x, int y)
{
    return x + y;
}

auto forwardToAdd(int x, int y)
{
    return add(__traits(parameters));
}
---

When used inside a nested function or lambda, the trait gets the arguments
of that and only that nested function or lambda, not what they are contained in.

For example, these assertions hold:
---
int testNested(int x)
{
    static assert(typeof(__traits(parameters)).length == 1);
    int add(int x, int y)
    {
        static assert(typeof(__traits(parameters)).length == 2);
        return x + y;
    }
    return add(x + 2, x + 3);
}
---

When used inside a `foreach` utilizing an overloaded `opApply`, the trait yields
the parameters to the delegate and not the function the foreach appears within.

---
class Tree {
    int opApply(int delegate(size_t, Tree) dg) {
        if (dg(0, this)) return 1;
        return 0;
    }
}
void useOpApply(Tree top, int x)
{
    foreach(idx; 0..5)
    {
        static assert(is(typeof(__traits(parameters)) == AliasSeq!(Tree, int)));
    }
    foreach(idx, elem; top)
    {
        static assert(is(typeof(__traits(parameters)) == AliasSeq!(size_t, Tree)));
    }
}
---

