Avoid calling the struct constructor from const-casts

In previous versions of DMD, there was an undocumented interaction of const-cast with
regular cast, ie. `cast()`, `cast(const)` and `cast(immutable)`, where these casts would
be expressed as `cast(const(typeof(expr))) expr`; hence if `expr` was of type `Struct`,
these casts could potentially call its constructor `Struct(expr)`, as per spec.

The dangerous part however, was if this occurred with structs that used their first field
as `alias this`, the implicit conversion via `alias this` would potentially satisfy an
implicit struct constructor, leaving the other fields set to `init` and leading to apparent
data corruption from a mere `cast()`.

In other words, `cast() s` to `S(s)` to `S(s.implicitCast)`.

This can no longer occur, since $(B `cast()`, `cast(const)` and `cast(immutable)` will
no longer generate an implicit constructor call.)
Implicit constructor calls to `S()` will only occur when one explicitly uses `cast(S)`.
