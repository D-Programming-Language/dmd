`bool` values other than 0 or 1 are not `@safe`

The spec [was updated](https://dlang.org/spec/type.html#bool)
(for 2.109) so that only 0 and 1 are
[safe values](https://dlang.org/spec/function.html#safe-values)
for `bool`. This means that reading a `bool` value whose underlying byte representation
has other bits set is implementation-defined and should be avoided.
Consequently the following are deprecated in `@safe` code:

* `void` initialization of booleans (since 2.109)
* Reading a (possibly qualified) `bool` field from a union that overlaps with a non-`bool` type (since 2.109)
* Runtime casting a non-`bool` dynamic array to a (possibly qualified) `bool` dynamic array type
* Runtime casting a (possibly qualified) `bool` dynamic array to a dynamic array type with mutable or `inout` non-`const`, non-`bool` elements
* Casting a non-`bool` pointer to a (possibly qualified) `bool` pointer type
* Casting a (possibly qualified) `bool` pointer to a pointer to a mutable or `inout` non-`const`, non-`bool` type
